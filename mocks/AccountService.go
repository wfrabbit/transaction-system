// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "wangfeng/transaction-system/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: account
func (_m *AccountService) CreateAccount(account *model.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: id
func (_m *AccountService) GetAccount(id uint64) (*model.GetAccountResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *model.GetAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*model.GetAccountResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *model.GetAccountResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: sourceAccountId, destinationAccountId, amount
func (_m *AccountService) Transfer(sourceAccountId uint64, destinationAccountId uint64, amount *float64) error {
	ret := _m.Called(sourceAccountId, destinationAccountId, amount)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, *float64) error); ok {
		r0 = rf(sourceAccountId, destinationAccountId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
